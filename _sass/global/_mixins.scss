// Mixins
// ------

        // ============================================================================
        //   Prefix mixin for generating vendor prefixes.
        //   Based on https://github.com/thoughtbot/bourbon/blob/v4-stable/app/assets/stylesheets/addons/_prefixer.scss

        //   Usage:
        //     // Input:
        //     .element {
        //       @include prefix(transform, scale(1), ms webkit spec);
        //     }

        //     // Output:
        //     .element {
        //       -ms-transform: scale(1);
        //       -webkit-transform: scale(1);
        //       transform: scale(1);
        //     }
        // ==============================================================================
        @mixin prefix($property, $value, $prefixes) {
          @each $prefix in $prefixes {
            @if $prefix == webkit {
              -webkit-#{$property}: $value;
            } @else if $prefix == moz {
              -moz-#{$property}: $value;
            } @else if $prefix == ms {
              -ms-#{$property}: $value;
            } @else if $prefix == o {
              -o-#{$property}: $value;
            } @else if $prefix == spec {
              #{$property}: $value;
            } @else  {
              @warn 'Unrecognized prefix: #{$prefix}';
            }
          }
        }

        /*================ Media Query Mixin ================*/
        @mixin media-query($media-query) {
          $breakpoint-found: false;

          @each $breakpoint in $breakpoints {
            $name: nth($breakpoint, 1);
            $declaration: nth($breakpoint, 2);

            @if $media-query == $name and $declaration {
              $breakpoint-found: true;

              @media only screen and #{$declaration} {
                @content;
              }
            }
          }

          @if $breakpoint-found == false {
            @warn 'Breakpoint "#{$media-query}" does not exist';
          }
        }

        /*================ Responsive Show/Hide Helper ================*/
        @mixin responsive-display-helper($breakpoint: '') {
          // sass-lint:disable no-important
          .#{$breakpoint}show {
            display: block !important;
          }

          .#{$breakpoint}hide {
            display: none !important;
          }
        }


        /*================ Responsive Text Alignment Helper ================*/
        @mixin responsive-text-align-helper($breakpoint: '') {
          // sass-lint:disable no-important
          .#{$breakpoint}text-left {
            text-align: left !important;
          }

          .#{$breakpoint}text-right {
            text-align: right !important;
          }

          .#{$breakpoint}text-center {
            text-align: center !important;
          }
        }




    @mixin clearfix() {
      &::after {
        content: '';
        display: table;
        clear: both;
      }

      // sass-lint:disable
      *zoom: 1;
    }
    @mixin visually-hidden() {
      // sass-lint:disable no-important
      position: absolute !important;
      overflow: hidden;
      clip: rect(0 0 0 0);
      height: 1px;
      width: 1px;
      margin: -1px;
      padding: 0;
      border: 0;
    }

    @mixin visually-shown($position: inherit) {
      // sass-lint:disable no-important
      position: $position !important;
      overflow: auto;
      clip: auto;
      width: auto;
      height: auto;
      margin: 0;
    }

    @mixin squared() {
      // sass-lint:disable no-important
      width:100% !important;
      height:0 !important;
      min-height:0 !important;
      padding-top:100% !important;
      display: block;
    }

    @mixin centered() {
      // sass-lint:disable no-important
      position:absolute;
      top:50%;
      left:50%;
      transform:translate(-50%,-50%);
    }



    /// Mixin printing a linear-gradient
    /// as well as a plain color fallback
    /// and the `-webkit-` prefixed declaration
    /// @access public
    /// @param {Keyword | Angle} $direction - Linear gradient direction
    /// @param {Arglist} $color-stops - List of color-stops composing the gradient
    // @mixin linear-gradient($direction, $color-stops...) {
    //   background: nth(nth($color-stops, 1), 1);
    //   background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
    //   background: linear-gradient($direction, $color-stops);
    // }




    @mixin linear-gradient($direction, $color-stops...) {
      // Direction has been omitted and happens to be a color-stop
      @if is-direction($direction) == false {
        $color-stops: $direction, $color-stops;
        $direction: 180deg;
      }

      background: nth(nth($color-stops, 1), 1);
      background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
      background: linear-gradient($direction, $color-stops);
    }



    /// Test if `$value` is a valid direction
    /// @param {*} $value - Value to test
    /// @return {Bool}
    @function is-direction($value) {
      $is-keyword: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
      $is-angle: type-of($value) == 'number' and index('deg' 'grad' 'turn' 'rad', unit($value));

      @return $is-keyword or $is-angle;
    }

    /// Convert a direction to legacy syntax
    /// @param {Keyword | Angle} $value - Value to convert
    /// @require {function} is-direction
    /// @require {function} convert-angle
    /// @throw Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be a direction.;
    @function legacy-direction($value) {
      @if is-direction($value) == false {
        @error "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be a direction.";
      }

      $conversion-map: (
        to top          : bottom,
        to top right    : bottom left,
        to right top    : left bottom,
        to right        : left,
        to bottom right : top left,
        to right bottom : left top,
        to bottom       : top,
        to bottom left  : top right,
        to left bottom  : right top,
        to left         : right,
        to left top     : right bottom,
        to top left     : bottom right
      );

      @if map-has-key($conversion-map, $value) {
        @return map-get($conversion-map, $value);
      }

      @return 90deg - $value;
    }






    @function prepend($list, $value) {
      @return join($value, $list);
    }



    @mixin gradientBlocks($col1,$col2,$stops:2,$isPanel:false,$deg:0deg) {
      $list: ();
      @for $i from 1 through $stops {
        $divStops: $stops - 1;
        $this: $i - 1;
        // Gets proper middle percents keeping in mind Start and Stop points
        $perc: ($this / $divStops) * 100;
        $shade: mix($col1, $col2, $perc);
        @if $i == 1 {
          // Force Start at first color / 0
          $perc:0;
          $shade: $col2;
        }
        @if $i == $stops {
          // Force End at last color / 100
          $perc:100;
          $shade: $col1;
        }
        @if $isPanel == false {
          /*  Loop / Perc: #{$i} / #{$perc} */
          /*  $col1 / $col2: #{$col1} / #{$col2} */
        }
        $list: append($list, $shade);
        @if $i != $stops {
          $list: append($list, unquote(","));
        }
        @if $isPanel == true {
          /*  Loop / Perc: #{$i} / #{$perc} */
          /*  $col1 / $col2: #{$col1} / #{$col2} */
          &:nth-of-type(#{$i}n + #{$stops}),
          &:nth-of-type(#{$i}) {
            // z-index: ($i * -1) + 100;
            background: $col1;
            background: $shade;
          }
        }
      }
      @if $isPanel == false {
        background: $col1;
        background: linear-gradient($deg, $list);
      }
    }
















